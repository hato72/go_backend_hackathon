package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	//"backend/graph/model"
	"context"
	"fmt"
	"time"

	"github.com/hato72/go_backend_hackathon/backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	user := &model.User{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
		IconURL:  input.IconURL,
	}

	r.db.Create(user)
	return user, nil
}

// CreateCuisine is the resolver for the createCuisine field.
func (r *mutationResolver) CreateCuisine(ctx context.Context, input *model.CuisineInput) (*model.Cuisine, error) {
	timestamp := time.Now().Format("2006-01-02 15:04:05")

	cuisine := &model.Cuisine{
		Title:     input.Title,
		IconURL:   input.IconURL,
		URL:       input.URL,
		CreatedAt: timestamp,
		UpdatedAt: timestamp,
		UserID:    input.UserID,
	}
	r.db.Create(cuisine)
	return cuisine, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	user := &model.User{
		Name:     "kota",
		Email:    "sample@test.com",
		Password: "pass",
	}
	return []*model.User{user}, nil
}

// Cuisines is the resolver for the cuisines field.
func (r *queryResolver) Cuisines(ctx context.Context) ([]*model.Cuisine, error) {
	panic(fmt.Errorf("not implemented: Cuisines - cuisines"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
